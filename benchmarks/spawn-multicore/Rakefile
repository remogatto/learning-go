load File.expand_path(File.join(File.dirname(__FILE__), %w[.. tasks common.rake]))

CLOBBER.include "spawn"

PROCESSES = [10, 100, 1000, 10000, 100000]
RESULTS = { :go => [], :go_mc => [], :erlang => [], :erlang_mc => [] }

task :write_results => [:spawn_erlang, :spawn_erlang_mc, :spawn_go, :spawn_go_mc] do
  template = ERB.new(File.read('benchmark.rhtml'))
  File.open('benchmark.html', 'w') { |f| f << template.result(binding) }
end

task :compile_spawn_erlang do
  sh "erlc spawn.erl"
end

desc "Run spawn_erlang"
task :spawn_erlang => :compile_spawn_erlang do
  PROCESSES.each do |processes|
    puts "Spawning #{processes} erlang processes"
    IO.popen("erl +P 500000 -noshell -pa #{Dir.pwd} -s spawn start #{processes} -s init stop") do |pipe|
      RESULTS[:erlang] << pipe.gets
    end
  end
end

desc "Run spawn_erlang with multicore"
task :spawn_erlang_mc => :compile_spawn_erlang do
  PROCESSES.each do |processes|
    puts "Spawning #{processes} erlang processes"
    IO.popen("erl -smp +S 2 +P 500000 -noshell -pa #{Dir.pwd} -s spawn start #{processes} -s init stop") do |pipe|
      RESULTS[:erlang_mc] << pipe.gets
    end
  end
end

task :compile_spawn_go do
  sh "#{GO_COMPILER} spawn.go && #{GO_LINKER} -o spawn spawn.#{GO_EXT}"
end

desc "Run spawn_go"
task :spawn_go => :compile_spawn_go do
  PROCESSES.each do |processes|
    puts "Spawning #{processes} goroutines"
    IO.popen("./spawn #{processes}") do |pipe|
      RESULTS[:go] << pipe.gets
    end
  end
end

desc "Run spawn_go with multicore"
task :spawn_go_mc => :compile_spawn_go do
  PROCESSES.each do |processes|
    puts "Spawning #{processes} goroutines"
    IO.popen("sh -c \"GOMAXPROCS=2 ./spawn #{processes}\"") do |pipe|
      RESULTS[:go_mc] << pipe.gets
    end
  end
end

desc "Run benchmarks"
task :spawn => [:clobber, :write_results] do
puts 'Wrote results in benchmark.html'
end

desc "Show system info"
task :info do
  puts "$GOARCH: #{ENV['GOARCH']}"
  puts "compiler: #{GO_COMPILER}"
  puts "linker: #{GO_LINKER}"
end

task :default => :spawn
